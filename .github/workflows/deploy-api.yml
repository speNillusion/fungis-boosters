name: 🚀 Deploy StackSpot API

on:
  push:
    branches: [ main, master ]
    paths:
      - 'api.mjs'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/deploy-api.yml'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'api.mjs'
      - 'package.json'
      - 'package-lock.json'
  workflow_dispatch:

jobs:
  test:
    name: 🧪 Test API
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📋 Install dependencies
      run: npm ci
      
    - name: 🔍 Lint code
      run: npm run lint || echo "No lint script found"
      
    - name: 🧪 Run tests
      run: npm test || echo "No test script found"
      
    - name: ✅ Validate API structure
      run: node -c api.mjs

  deploy:
    name: 🚀 Deploy to Production
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    environment:
      name: production
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: 📋 Install dependencies
      run: npm ci --only=production
      
    - name: 🔧 Create .env file
      run: |
        echo "REALM=${{ secrets.REALM }}" >> .env
        echo "CLIENT_ID=${{ secrets.CLIENT_ID }}" >> .env
        echo "CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}" >> .env
        echo "PORT=${{ secrets.PORT || '5000' }}" >> .env
        echo "NODE_ENV=production" >> .env
        
    - name: ✅ Validate environment
      run: |
        if [ -z "${{ secrets.REALM }}" ]; then
          echo "❌ REALM secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.CLIENT_ID }}" ]; then
          echo "❌ CLIENT_ID secret is not set"
          exit 1
        fi
        if [ -z "${{ secrets.CLIENT_SECRET }}" ]; then
          echo "❌ CLIENT_SECRET secret is not set"
          exit 1
        fi
        echo "✅ All required secrets are configured"
        
    - name: 🚀 Deploy to Heroku
      uses: akhileshns/heroku-deploy@v3.12.14
      with:
        heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
        heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
        heroku_email: ${{ secrets.HEROKU_EMAIL }}
        usedocker: false
        procfile: "web: node api.mjs"
      if: secrets.HEROKU_API_KEY != ''
      
    - name: 🚀 Deploy to Railway
      run: |
        npm install -g @railway/cli
        railway login --token ${{ secrets.RAILWAY_TOKEN }}
        railway up
      if: secrets.RAILWAY_TOKEN != ''
      
    - name: 🚀 Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        working-directory: ./
      if: secrets.VERCEL_TOKEN != ''
      
    - name: 📊 Health Check
      run: |
        sleep 30
        curl -f ${{ steps.deploy.outputs.url }}/health || echo "Health check failed"
      if: steps.deploy.outputs.url != ''

  notify:
    name: 📢 Notify Deployment
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📢 Deployment Success
      if: needs.deploy.result == 'success'
      run: |
        echo "✅ API deployed successfully!"
        echo "🌐 URL: ${{ needs.deploy.outputs.url }}"
        
    - name: ❌ Deployment Failed
      if: needs.deploy.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        echo "📋 Check the logs for more details."